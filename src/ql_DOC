
Query Language Component for RedBase

Nandu Jayakumar
CS 346 Spring 2011
nandu@cs.stanford.edu


---------------------------------------

References:

Database Systems: The Complete Book by Hector Garica-Molina, Jeffrey Ullman and
Jennifer Widom 
Database Management Systems by Raghu Ramakrishnan and Johannes Gehrke
Minibase documentation on cs.wisc.edu

---------------------------------------

Overall Design:
 
  This implementation of RQL is an instance of the iterator model. All physical
  operators are implemented as iterators. These iterators can be composed of
  other iterators in turn leading to a flexible composition of iterators.

  Complete semantic checking of queries submitted is performed. See the various
  SM_Manager::SemCheck() methods in sm_manager.cc. Basic rewrites are performed
  to expand "select *" and all the conditions.

  Conversion from the logical query plan to the physical plan is mainly done via
  heuristics. Only left-deep join trees are considered. The primary statistics
  used during plan selection are the number of pages in the relation and number
  of records in the relation. Relations are ordered so that the smaller relation
  is chosen as the outer for a join when possible.

  Indexes are preferred whenever conditions allow them to be. Filters are pushed
  down as far as possible. Most operators also support an output side filtering
  for the filters that cannot be pushed down any further. For index scans
  different orders(ascending/descending) are used based on the operation (<, >,
  =) required to permit early exits for optimization.

  Whenever the right iterator is an index scan for a join operator an
  NestedLoopIndexJoin (NLIJ) is considered. Similarly, whenever the left
  iterator is detected as a file scan a NestedBlockJoin is considered. A basic
  NestedLoopJoin exists for non-leaf joins and to also implement cross-product
  functionality.
  
  A separate per-record implementation for Insert clause was done without
  reusing the existing bulk loader to ensure that operations on catalogs and
  other meta operations are not done too often.
  
  The Update clause is implemented separately and not as a reuse of the
  Delete/Insert clause methods to ensure that a single pass is used instead of
  two passes. The Update clause handles the halloween problem by not choosing an
  index-scan on an attribute when the attribute is the one being updated.

 

---------------------------------------

Physical Operators Implemented (fully):

  FileScan
  IndexScan
  NestedLoopJoin
  Projection
  NestedLoopIndexJoin (derives from NLJ)
  NestedBlockJoin (derives from NLJ)

  Filter is not implemented separately, but as a part of all above operators.
  The Projection and Join iterators in turn contain other iterators to allow for
  flexible composition.

  See iterator.h for the interface of class Iterator that all these operators
  derive from. iterator.h also contains the definition of the Tuple class that
  is passed around by these operators.

---------------------------------------

Testing:

   Automated unit tests were used to test each class. 
   See *_gtest.cc for each iterator implemented.
   Additionally ql_test.[1-7] are other full RQL scripts.

---------------------------------------

Bugs/Known Issues:
    

---------------------------------------

